march 16
From here https://realpython.com/flask-connexion-rest-api/

in pursuit of this https://realpython.com/flask-javascript-frontend-for-rest-api/

Most modern web applications are powered by a REST API under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’ll build a REST API with the Flask web framework.

You’ll create a foundation with a basic Flask project then add endpoints and connect them to a SQLite database. You’ll test your API with Swagger UI API documentation that you’ll build along the way.

In the first part of this tutorial series, you’ll learn how to:

    Build a base Flask project with a REST API
    Handle HTTP requests with Connexion
    Define API endpoints using the OpenAPI specification
    Interact with your API to manage data
    Build API documentation with Swagger UI

After finishing the first part of this series, you’ll move on to the second part, where you’ll learn to use a proper database to store your data permanently instead of relying on in-memory storage.

This tutorial series is a hand-on guide on how to create a REST API with Flask and interact with it using CRUD operations. If you want to refresh your knowledge on working with APIs, then you can give Python and REST APIs: Interacting With Web Services a read.



also could be helpful for DEPLOYMENT later:
https://www.angela1c.com/posts/2021/06/deploying-flask-apps-on-linode.com/


finally some info for git:
…or create a new repository on the command line

echo "# flask_api_GP" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/devo2ps/flask_api_GP.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/devo2ps/flask_api_GP.git
git branch -M main
git push -u origin main


basic workflow

<do stuff>
git add .  (adds everything that has changed into the buffer)
git commit -m "say whatever you did"
git push -u origin main (now updates the hub)


anyways...


march 19 lol

march 20 

added the rest (GET, POST, PUT, DELETE) of the API endpoints and relevant functions in people.py
Now to write it up in the physical notes and move onto step two

https://realpython.com/flask-connexion-rest-api-part-2/

march 21

Most modern web applications are powered by a REST API under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’re building a REST API with the Flask web framework.

You’ve created a foundation with a basic Flask project and added endpoints, which you’ll connect to a SQLite database. You’re also testing your API with Swagger UI API documentation that you’re building along the way.

In the first part, you used Flask and Connexion to create a REST API providing CRUD operations to an in-memory structure called PEOPLE. By doing so, you learned how the Connexion module helps you build a nice REST API and interactive documentation.

In the second part of this tutorial series, you’ll learn how to:

    Write SQL commands in Python
    Configure a SQLite database for your Flask project
    Use SQLAlchemy to save Python objects to your database
    Leverage the Marshmallow library to serialize data
    Connect your REST API with your database

After finishing the second part of this series, you’ll move on to the third part, where you’ll extend your REST API with the functionality to add notes to a person. 


flask-marshmallow is an extension of the marshmallow library, in this case to be used as a serializer, and helps add extra features when working in flask

SQLite3 is great for python projects since it can be used immediately via pythons sqlite3 import and works without need for a whole sql server, just a single file that can be interacted with with pythons REPL in the command line. Using dbmaker and filler I was able to add a number of entities into it and then read them out via console commands/python functions.


march 22


ANY user input is an attack vector, an app like this with connecting flask with a sqlite db is open to SQL injections without properly configured prepared statements!

One example that could be employed as things stand: GET /api/people/'Fairy';DROP TABLE person;
 where 'Fairy' was specified by the user followed by a semicolon and drop table command
 
 'You can protect your program by sanitizing all data that you get from the users of your application. Sanitizing data in this context means having your program examine the user-supplied data to make sure that it doesn’t contain anything dangerous to the program. This can be tricky to do right and would have to be done everywhere user data interacts with the database.'
 
 
 
 march 23 time for p3
 
 https://realpython.com/flask-connexion-rest-api-part-3/
 
 Most modern web applications are powered by a REST API under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’re building a REST API with the Flask web framework.

You’ve created a foundation with a basic Flask project and added endpoints, which you connected to a SQLite database. You’re also testing your API with Swagger UI API documentation that you’re building along the way.

In the third part of this tutorial series, you’ll learn how to:

    Work with multiple tables in a database
    Create one-to-many fields in your database
    Manage relationships with SQLAlchemy
    Leverage nested schemas with Marshmallow
    Display related objects in the front end
   
   
march 24 
populated the db with the db builder script, added in html to display notes from the db, added include_relationships=True to the PersonSchema meta class and also added a NoteSchema meta class. Additionally added a notes field to the personschema metaclass

march 26
took a day off unfortunately, today edited the swagger.yml file to handle notes and added a notes.py file to read them by ID at least

march 29

had to deal with moving, just reviewed the docs today will hopefully do more tomorrow


march 30

reviewed more docs, trying to add some code fast